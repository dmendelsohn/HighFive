<project name="Main" basedir="." default="rebuild-run">
	<property name="src.dir"				value="src"/>
	<property name="build.dir"				value="build"/>
	<property name="lib.dir"     value="../vision-lib/"/>
	<path id="classpath">
          <fileset dir="${lib.dir}" includes="**/*.jar"/>
	</path>

	<property name="classes.dir"			value="${build.dir}/classes"/>
	<property name="jar.dir"				value="${build.dir}/jar"/>
	
	<property name="main-class"				value="${ant.project.name}"/>
	<property name="filter-class"			value="FilterImage"/>
	<property name="blob-labeling-class"	value="BlobLabeling"/> <!-- Creates a byte array with color values replaced by blob labels, + info file -->
	<property name="blob-analysis-class"	value="BlobAnalysis"/> <!--Finds bounding box, centroid, and deletes blobs that are too small -->

	<property name="vision-files.dir"		value="vision"/>
	<property name="filter-img-file"		value="${vision-files.dir}/filtered-img.jpg"/> <!-- This is the pretty picture with blobs -->
	<property name="filter-raw-file"		value="${vision-files.dir}/filtered-raw.out"/> <!-- This holds the byte array for the raw result of the filter -->
	<property name="filter-info-file"		value="${vision-files.dir}/filtered-info.txt"/> <!-- this gives height and width dimensions -->
	<property name="label-raw-file"			value="${vision-files.dir}/label-raw.out"/> <!-- This replaces color values with labels, in array of shorts -->
	<property name="label-info-file"		value="${vision-files.dir}/label-info.txt"/> <!-- This file maps label numbers to original values (color enum)  -->
	<property name="analysis-raw-file"		value="${vision-files.dir}/analysis-raw.out"/> <!-- like label-raw.out, but without "noise" blobs -->
	<property name="analysis-info-file-default"		value="${vision-files.dir}/analysis-info.txt"/> <!-- augments label-info.txt with bounding and centriods -->
	<property name="analysis-img-file-default"		value="${vision-files.dir}/analysis-img.jpg"/> <!-- human viewable image with analysis results -->

	<property name="in-default"				value="test_pics/One.jpg"/>
	<condition property="input-file" value="${in}" else="${in-default}">
		<isset property="in" />
	</condition>

	<condition property="analysis-img-file" value="${out}" else="${analysis-img-file-default}">
		<isset property="out" />
	</condition>

	<condition property="analysis-info-file" value="${info}" else="${analysis-info-file-default}">
		<isset property="info" />
	</condition>

	<condition property="vis-value" value="true" else="false">
		<and>
			<isset property="vis"/>
			<equals arg1="${vis}" arg2="true"/>
		</and>
	</condition>

	<condition property="debug-value" value="true" else="false">
		<and>
			<isset property="debug"/>
			<equals arg1="${debug}" arg2="true"/>
		</and>
	</condition>

	<path id="classpath">
            <fileset dir="${lib.dir}" includes="**/*.jar"/>
	</path>

	<target name="clean">
		<delete dir="${build.dir}"/>
	</target>

	<target name="compile">
		<mkdir dir="${classes.dir}"/>
		<javac includeantruntime="false" srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath"/>
	</target>

	<target name="jar" depends="compile">
		<mkdir dir="${jar.dir}"/>
		<jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}">
			<manifest>
				<attribute name="Main-Class" value="${main-class}"/>
			</manifest>
		</jar>
	</target>

	<target name="run-filter" depends="jar">
		<java fork="true" classname="${filter-class}">
			<classpath>
				<path refid="classpath"/>
				<pathelement location="${jar.dir}/${ant.project.name}.jar"/>
			</classpath>
			<arg value="${input-file}"/>
			<arg value="${filter-img-file}"/>
			<arg value="${filter-raw-file}"/>
			<arg value="${filter-info-file}"/>
		</java>
	</target>

	<target name="run-blob-labeling" depends="run-filter">
		<java fork="true" classname="${blob-labeling-class}">
			<classpath>
				<path refid="classpath"/>
				<pathelement location="${jar.dir}/${ant.project.name}.jar"/>
			</classpath>
			<arg value="${filter-raw-file}"/> <!-- this is the raw byte by byte input with GameColors as the pixel type -->
			<arg value="${filter-info-file}"/> <!-- this has the height and width info that we require -->
			<arg value="${label-raw-file}"/> <!-- this is where the int array with GameColor replaced by labels goes -->
			<arg value="${label-info-file}"/> <!-- this is where the txt file mapping labels to game colors goes -->
		</java>
	</target>

	<target name="run-blob-analysis" depends="run-blob-labeling">
		<java fork="true" classname="${blob-analysis-class}">
			<classpath>
				<path refid="classpath"/>
				<pathelement location="${jar.dir}/${ant.project.name}.jar"/>
			</classpath>
			<arg value="${label-raw-file}"/>	<!-- This is where the label int array comes from -->
			<arg value="${label-info-file}"/>	<!-- This gives us image dimensions and label->color mappings -->
			<arg value="${analysis-raw-file}"/>	<!-- This is label-raw-file, cleaned of blobs we don't want -->
			<arg value="${analysis-img-file}"/>	<!-- human viewable output of the analysis -->
			<arg value="${analysis-info-file}"/>	<!-- txt file w/ dimenions, label->color map, and BlobInfo objects-->
		</java>
	</target>

	<target name="run" depends="jar">
		<java fork="true" classname="${main-class}" >
		        <sysproperty key="java.library.path" path="${lib.dir}"/>
			<classpath>
				<path refid="classpath"/>
				<pathelement location="${jar.dir}/${ant.project.name}.jar"/>
			</classpath>
			<arg value="${input-file}"/>		<!-- source image path -->
			<arg value="${analysis-info-file}"/> <!-- dest path to output text file -->
			<arg value="${analysis-img-file}" /> 	<!-- if vis-value is true, then a jpg of the analysis will be put here -->
			<arg value="${vis-value}" />
			<arg value="${debug-value}"/>
		</java>
	</target>

	<target name="rebuild-run" depends="clean,run"/>
</project>

